import os, stripe, traceback, edge_tts, asyncio, uuid, time, tempfile
from flask import Flask, request, send_file, render_template, redirect, url_for, session, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from moviepy.video.VideoClip import TextClip
from moviepy.video.compositing.CompositeVideoClip import CompositeVideoClip
from moviepy.video.io.VideoFileClip import VideoFileClip
from moviepy.audio.io.AudioFileClip import AudioFileClip
import smtplib
from email.mime.text import MIMEText
import random
import gdown



# ConfiguraÈ›ii email (modificÄƒ cu datele tale)

app = Flask(__name__)
app.secret_key = os.urandom(24)
app.config['MAIL_SERVER'] = 'smtp.gmail.com'
app.config['MAIL_PORT'] = 587
app.config['MAIL_USE_TLS'] = True
app.config['MAIL_USERNAME'] = 'bitgaming225@gmail.com'
app.config['MAIL_PASSWORD'] = 'sbfy voly opeb giyo'
# Config DB È™i bcrypt
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'
db = SQLAlchemy(app)
bcrypt = Bcrypt(app)

# Config Stripe (seteazÄƒ corect cheile tale)
stripe.api_key = "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"
app.config['STRIPE_PRICE_ID'] = 'price_1RIxeUGvoNbZDo5jSTbaavOG'  # Ã®nlocuieÈ™te cu Price ID-ul tÄƒu

# Modelul User cu cÃ¢mpul premium
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(150), unique=True, nullable=False)  # <-- obligatoriu
    password = db.Column(db.String(150), nullable=False)
    is_premium = db.Column(db.Boolean, default=False)
    confirmed = db.Column(db.Boolean, default=False)
    confirmation_code = db.Column(db.String(6))



with app.app_context():
    db.create_all()
progress_data={}
# Ruta pentru progres
@app.route('/progress')
def get_progress():
    user_id = session.get('user_id')
    if user_id:
        return jsonify(progress=progress_data.get(user_id, 0))
    return jsonify(progress=0)

def update_progress(value):
    user_id = session.get('user_id')
    if user_id:
        progress_data[user_id] = value

@app.route('/')
def home():
    if 'user_id' in session:
        return redirect(url_for('index'))
    return redirect(url_for('login'))

@app.route('/index')
def index():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    return render_template("index.html", email=session['email'])

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        email = request.form['email']
        password = bcrypt.generate_password_hash(request.form['password']).decode('utf-8')
        
        existing_user = User.query.filter_by(email=email).first()
        if existing_user:
            if not existing_user.confirmed:
                db.session.delete(existing_user)
                db.session.commit()
            else:
                return "Email already exists!"
        try:
            code = str(random.randint(100000, 999999))
            new_user = User(
                email=email,
                password=password,
                confirmation_code=code,
                confirmed=False
            )
            db.session.add(new_user)
            db.session.commit()
            
            print(f"[DEBUG] Cod generat: {code}")  # Verificare cod
            
            # ConstruieÈ™te mesajul email
            msg = MIMEText(f'Codul tÄƒu de verificare NEON AI este: <strong>{code}</strong>', 'html')
            msg['Subject'] = 'ðŸ”‘ Cod verificare NEON AI'
            msg['From'] = app.config['MAIL_USERNAME']
            msg['To'] = email
            
            # Trimite email
            with smtplib.SMTP(app.config['MAIL_SERVER'], app.config['MAIL_PORT']) as server:
                server.starttls()
                server.login(app.config['MAIL_USERNAME'], app.config['MAIL_PASSWORD'])
                server.send_message(msg)
                print(f"[DEBUG] Email trimis cÄƒtre {email}")  # Confirmare trimitere

            return redirect(url_for('verify_email', email=email))
            
        except Exception as e:
            db.session.rollback()
            print(f"[EROARE] Email nu a putut fi trimis: {str(e)}")  # Log detaliat
            return f"Eroare la trimitere cod: {str(e)}", 500

    return render_template('register.html')

@app.route('/verify', methods=['GET', 'POST'])
def verify_email():
    if request.method == 'POST':
        # SchimbÄƒ aici: request.args -> request.form
        email = request.form.get('email')
        entered_code = request.form['code']
        
        user = User.query.filter_by(email=email).first()
        
        if user and user.confirmation_code == entered_code:
            user.confirmed = True
            user.confirmation_code = None  # È˜terge codul dupÄƒ verificare
            db.session.commit()
            return redirect(url_for('login'))
        return "Invalid code!", 400

    return render_template('verify_email.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']

        user = User.query.filter_by(email=email).first()
        if not user or not bcrypt.check_password_hash(user.password, password):
            return "Invalid Credentials!", 401
            
        if not user.confirmed:
            return "Unconfirmed account, check your email.", 401

        session['user_id'] = user.id
        session['email'] = user.email
        return redirect(url_for('index'))
    
    return render_template('login.html')

@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('login'))
@app.route('/create-checkout-session')
def create_checkout_session():
    try:
        checkout_session = stripe.checkout.Session.create(
            payment_method_types=['card'],
            line_items=[{
                'price': app.config['STRIPE_PRICE_ID'],
                'quantity': 1,
            }],
            mode='subscription',
            success_url=url_for('success', _external=True) + '?session_id={CHECKOUT_SESSION_ID}',
            cancel_url=url_for('index', _external=True),
            metadata={'user_id': session.get('user_id')}
        )
        return redirect(checkout_session.url, code=303)
    except Exception as e:
        return f"Stripe Error: {str(e)}", 500

@app.route('/success')
def success():
    session_id = request.args.get('session_id')
    if session_id:
        try:
            checkout_session = stripe.checkout.Session.retrieve(session_id)
            user_id = checkout_session.metadata.get('user_id')
            user = User.query.get(int(user_id)) if user_id else None
            if user:
                user.is_premium = True
                db.session.commit()
                session['user_id'] = user.id  # ReÃ®nnoieÈ™te sesiunea
        except Exception as e:
            print(f"Error upgradinng: {str(e)}")
    return redirect(url_for('index'))

@app.route('/cancel')
def cancel():
    return redirect(url_for('index'))
@app.route('/generate_video', methods=['POST'])
def generate_video():
    try:
        update_progress(0)
        sentence = request.form['text']
        print("Text primit:", sentence)

        # Generare audio
        async def generate_audio():
            communicate = edge_tts.Communicate(sentence, "en-CA-LiamNeural")
            await communicate.save(temp_audio_path)
        session['request_id'] = str(uuid.uuid4())
        
        # CÄƒi unice pentru fiÈ™iere
        temp_audio_path = f"static/temp_audio_{session['request_id']}.mp3"
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(generate_audio())
        update_progress(20)

        # Procesare audio
        audio = AudioFileClip(temp_audio_path)
        audio_duration = audio.duration

        # Procesare text
        def split_text(text, max_length=20):
            words = text.split(' ')
            chunks = []
            current_chunk = ""
            
            for word in words:
                if len(current_chunk) + len(word) + 1 > max_length:
                    if current_chunk:
                        chunks.append(current_chunk)
                        current_chunk = word
                    else:
                        chunks.append(word[:max_length])
                        current_chunk = word[max_length:]
                else:
                    current_chunk += " " + word if current_chunk else word
            
            if current_chunk:
                chunks.append(current_chunk)
            
            return chunks

        chunks = split_text(sentence)
        update_progress(40)

        # Creare text clips
        total_chars = sum(len(chunk) for chunk in chunks)
        text_clips = []
        start_time = 0
        
        for chunk in chunks:
            chunk_duration = (len(chunk) / total_chars) * audio_duration
            
            txt_clip = TextClip(
                text=chunk,
                font='impact',
                font_size=100,
                color='#FF69B4',
                size=(1200, None),
                stroke_color='#FF1493',
                stroke_width=5,
                transparent=True,
                method='caption',
                text_align='center',
            ).with_duration(chunk_duration).with_start(start_time).with_position('center')
            text_clips.append(txt_clip)
            start_time += chunk_duration

        update_progress(60)
        DRIVE_FILE_ID = "1VTH0cSEJpBKJcHPAjUfZs5cmirQh9Jc4"
        download_url = f"https://drive.google.com/uc?export=download&id={DRIVE_FILE_ID}"
        temp_video_path = f"static/temp_video_{session['request_id']}.mp4"
        segment_duration = audio_duration + 1
        if not os.path.exists(temp_video_path):
            gdown.download(download_url, temp_video_path, quiet=False)
        # ÃŽncÄƒrcare gameplay
        try:
            gameplay = VideoFileClip(temp_video_path).subclipped(0, audio_duration)
        except Exception as e:
            print(f"Eroare la Ã®ncÄƒrcarea videoclipului Drive:  {e}")
            return "Eroare la Ã®ncÄƒrcarea videoclipului", 500
        user = User.query.get(session.get('user_id'))
        if user and user.is_premium:
            final = CompositeVideoClip([gameplay] + text_clips).with_audio(audio)
        else:
            watermark = TextClip(text="CikaBot", font='impact', font_size=100,
                                color='white', stroke_color='black', stroke_width=2)
            watermark = (watermark
                        .with_opacity(0.5)
                        .with_duration(audio_duration)
                        .with_position('top'))
            final = CompositeVideoClip([gameplay, watermark] + text_clips).with_audio(audio)
        update_progress(80)
        # Salvare video
        output_path = f"static/generated_video_{session['request_id']}.mp4"
        final.write_videofile(output_path, fps=24, codec='libx264', audio_codec='aac')
        update_progress(100)

        response = send_file(output_path, as_attachment=True)
        response.call_on_close(lambda: cleanup_files(temp_audio_path, output_path))
        return response
    except Exception as e:
        print("Error:", e)
        print("Error details:", traceback.format_exc())
        return f"Error: {str(e)}", 500
    finally:
        time.sleep(2)
        update_progress(0)
def cleanup_files(*paths):
    for path in paths:
        try:
            if path and os.path.exists(path):
                os.remove(path)
                print(f"[CLEANUP] È˜ters: {path}")
            else:
                print(f"[CLEANUP] FiÈ™ier inexistent sau deja È™ters: {path}")
        except Exception as e:
            print(f"[EROARE CLEANUP] Nu s-a putut È™terge {path}: {str(e)}")

def delete_temp_files():
    temp_dir = tempfile.gettempdir()
    for fname in os.listdir(temp_dir):
        if fname.startswith(('temp_audio_', 'generated_video_')):
            try:
                os.remove(os.path.join(temp_dir, fname))
            except:
                pass
if __name__ == '__main__':
    if not os.path.exists("static"):
        os.makedirs("static")
    app.run(debug=True)
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CiKaBOT</title>
    
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&family=Montserrat:wght@300;400;600&display=swap" rel="stylesheet">
    <style>
        :root {
            --neon-pink: #ff2a6d;
            --neon-blue: #05d9e8;
            --neon-purple: #d300c5;
            --neon-green: #00ff9d;
            --dark-bg: #0d0221;
            --darker-bg: #05010e;
            --text-color: #ffffff;
            --text-glow: 0 0 10px var(--neon-blue), 0 0 20px var(--neon-blue);
        }

        body {
            font-family: 'Montserrat', sans-serif;
            background-color: var(--dark-bg);
            color: var(--text-color);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            background-image: 
                radial-gradient(circle at 10% 20%, rgba(5, 217, 232, 0.1) 0%, transparent 20%),
                radial-gradient(circle at 90% 80%, rgba(255, 42, 109, 0.1) 0%, transparent 20%);
            margin: 0;
            padding: 20px;
        }

        .neon-container {
            width: 100%;
            max-width: 1200px;
            margin: auto;
        }

        .neon-text { text-shadow: var(--text-glow); }
        
        .neon-header {
            text-align: center;
            margin-bottom: 3rem;
        }

        .neon-title {
            font-family: 'Orbitron', sans-serif;
            font-size: clamp(2.5rem, 6vw, 4rem);
            color: var(--neon-pink);
            text-shadow: 
                0 0 5px #fff,
                0 0 10px #fff,
                0 0 20px var(--neon-pink),
                0 0 30px var(--neon-pink);
            letter-spacing: 3px;
            margin-bottom: 1rem;
            animation: flicker 3s infinite alternate;
        }

        @keyframes flicker {
            0%, 19%, 21%, 23%, 25%, 54%, 56%, 100% {
                text-shadow: 0 0 5px #fff, 0 0 10px #fff, 0 0 20px var(--neon-pink), 0 0 30px var(--neon-pink);
            }
            20%, 24%, 55% { text-shadow: none; }
        }

        .neon-input {
            width: 100%;
            min-height: 150px;
            background-color: var(--darker-bg);
            border: 1px solid var(--neon-purple);
            border-radius: 5px;
            padding: 15px;
            color: white;
            font-size: 1rem;
            resize: vertical;
            margin-bottom: 20px;
            transition: all 0.3s;
        }

        .neon-input:focus {
            outline: none;
            border-color: var(--neon-green);
            box-shadow: 0 0 10px var(--neon-green);
        }

        .neon-button {
            font-family: 'Orbitron', sans-serif;
            background: transparent;
            color: white;
            border: 2px solid var(--neon-blue);
            border-radius: 5px;
            padding: 10px 20px;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s;
            text-transform: uppercase;
            margin: 5px;
        }

        .generate-btn {
            border-color: var(--neon-pink);
            color: var(--neon-pink);
        }

        .generate-btn:hover {
            background: rgba(255, 42, 109, 0.2);
            box-shadow: 0 0 15px var(--neon-pink);
        }

        .video-container {
            width: 100%;
            min-height: 300px;
            background: var(--darker-bg);
            border: 2px dashed var(--neon-blue);
            border-radius: 10px;
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 20px 0;
        }

        @media (max-width: 768px) {
            .neon-title { font-size: 2.5rem; }
            .neon-button { width: 100%; }
        }
    </style>
</head>
<body>
    <div class="neon-container">
        <header class="neon-header">
            <h1 class="neon-title">CIKABOT</h1>
            <p class="neon-text">Transform text into minecraft parkour videos</p>
            {% if email %}
              <div style="position: absolute; top: 20px; right: 20px;">
                <span style="color: var(--neon-green); margin-right: 15px;">
                    Welcome, {{ email }}!
                </span>
                <a href="{{ url_for('logout') }}" class="neon-button"
                   style="border-color: var(--neon-pink); color: var(--neon-pink);">
                  Logout
                </a>
                <a href="{{ url_for('create_checkout_session') }}" class="neon-button"
                   style="border-color: var(--neon-green); color: var(--neon-green); margin-left: 10px;">
                  Upgrade
                </a>
              </div>
            {% endif %}
            <p class="neon-text"></p>
        </header>

        <main>
            {% if email %}
                
                
                <div style="text-align: center;">
                    <textarea class="neon-input" placeholder="Enter your text here..." maxlength="50000"></textarea>
                    <button class="neon-button generate-btn" id="generateBtn">GENERATE</button>
                </div>
        
                <div class="video-container" id="videoContainer">
                    <p>Video will appear here</p>
                </div>
            {% else %}
                <div style="text-align: center; margin-top: 50px;">
                    <h2 style="color: var(--neon-pink);">You must be logged in to use this tool</h2>
                    <a href="/login" class="neon-button" style="border-color: var(--neon-blue); color: var(--neon-blue); margin-right: 10px;">Login</a>
                    <a href="/register" class="neon-button" style="border-color: var(--neon-green); color: var(--neon-green);">Register</a>
                </div>
            {% endif %}
        </main>
    </div>

    <script>
        document.getElementById('generateBtn').addEventListener('click', async function() {
            const text = document.querySelector('.neon-input').value.trim();
            const videoContainer = document.getElementById('videoContainer');
            
            if (!text) {
                alert('Introdu textul pentru generare');
                return;
            }

            videoContainer.innerHTML = `
                <div style="text-align: center;">
                    <div style="
                        width: 50px;
                        height: 50px;
                        border: 5px solid ${getComputedStyle(document.documentElement).getPropertyValue('--neon-pink')};
                        border-top-color: transparent;
                        border-radius: 50%;
                        animation: spin 1s linear infinite;
                        margin: 0 auto 15px;
                    "></div>
                    <p>Se genereazÄƒ videoclipul... <span id="progressValue">0%</span></p>
                    <div style="width: 200px; height: 5px; background: #222; margin: 10px auto; border-radius: 3px;">
                        <div id="progressBar" style="width: 0%; height: 100%; background: ${getComputedStyle(document.documentElement).getPropertyValue('--neon-pink')}; transition: width 0.3s;"></div>
                    </div>
                </div>
            `;

            const progressInterval = setInterval(async () => {
                try {
                    const response = await fetch('/progress');
                    const data = await response.json();
                    document.getElementById('progressValue').textContent = `${data.progress}%`;
                    document.getElementById('progressBar').style.width = `${data.progress}%`;
                } catch (e) {
                    console.error('Eroare la verificarea progresului:', e);
                }
            }, 500);

            try {
                const response = await fetch('/generate_video', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `text=${encodeURIComponent(text)}`
                });

                clearInterval(progressInterval);
                
                if (!response.ok) throw new Error('Eroare la generare');

                const videoBlob = await response.blob();
                const videoUrl = URL.createObjectURL(videoBlob);
                
                videoContainer.innerHTML = `
                    <video controls autoplay style="width: 100%; max-height: 500px;">
                        <source src="${videoUrl}" type="video/mp4">
                        Browserul tÄƒu nu suportÄƒ tag-ul video.
                    </video>
                    <div style="margin-top: 15px;">
                        <a href="${videoUrl}" download="neon-video.mp4" class="neon-button">DESCARCÄ‚</a>
                    </div>
                `;

            } catch (error) {
                clearInterval(progressInterval);
                videoContainer.innerHTML = `
                    <div style="color: ${getComputedStyle(document.documentElement).getPropertyValue('--neon-pink')}">
                        <p>Eroare: ${error.message}</p>
                        <button class="neon-button" onclick="location.reload()">ÃŽncearcÄƒ din nou</button>
                    </div>
                `;
            }
            // AdaugÄƒ acest cod dupÄƒ descÄƒrcarea video-ului
            videoContainer.querySelector('video').onloadstart = function() {
                fetch('/cleanup', { method: 'POST' }); // OpÈ›ional - notificÄƒ serverul
            };
        });
    </script>
</body>
</html>
